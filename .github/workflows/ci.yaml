name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1
jobs:
  build-clang:
    # strategy:
    #   matrix:
    #     target:
    #     # Disable PCH for the default configuration. This prevents relying on implicit includes.
    #     - '-DCMAKE_DISABLE_PRECOMPILE_HEADERS=On'
    #     - '-DMOLD_USE_ASAN=On'
    #     - '-DMOLD_USE_TSAN=On'
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: install-build-deps
      run: |
        sudo apt-key adv --fetch-keys https://apt.llvm.org/llvm-snapshot.gpg.key
        sudo sh -c 'echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main" >> /etc/apt/sources.list.d/llvm.list'
        sudo apt update
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
    - name: build
      run: |
        echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        sudo apt-get install -y clang++-13
        mkdir build
        cd build
        cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++-13 ..
        cmake --build . -j$(nproc)
    # - name: test
    #   run: |
    #     cd build
    #     ctest -j$(nproc)
    # - name: archive test results
    #   uses: actions/upload-artifact@v3
    #   if: failure()
    #   with:
    #     name: test-results-clang
    #     path: |
    #       build
    #       !build/CMakeFiles

  build-gcc:
    runs-on: ubuntu-20.04
    container: gcc:latest
    steps:
    - uses: actions/checkout@v3
    - name: install-build-deps
      shell: bash
      run: |
        # Install cross toolchains
        apt-get update
        apt-get install -y cmake gcc g++ g++-12
  
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
    - name: build
      run: |
        echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j$(nproc)
    # - name: test
    #   run: |
    #     cd build
    #     ctest -j$(nproc)
    # - name: archive test results
    #   uses: actions/upload-artifact@v3
    #   if: failure()
    #   with:
    #     name: test-results-gcc
    #     path: |
    #       build
    #       !build/CMakeFiles

  build-macos:
    runs-on: macos-latest
    # strategy:
    #   matrix:
    #     target:
    #     # Disable PCH for the default configuration. This prevents relying on implicit includes.
    #     - '-DCMAKE_DISABLE_PRECOMPILE_HEADERS=On'
    #     - '-DMOLD_USE_ASAN=On'
    steps:
    - uses: actions/checkout@v3
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
    - name: build
      run: |
        echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        cmake --version
        mkdir build
        cd build
        cmake ${{ matrix.target }} ..
        cmake --build . -j$(sysctl -n hw.physicalcpu)

  build-windows:
    name: "Build - Windows"
    runs-on: windows-2022
    steps:
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install CMake
        uses: lukka/get-cmake@v3.27.6

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3

      - uses: actions/checkout@v4

      - name: configure
        run: cmake -S . -B build -G "Ninja" -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE=Release
        env:
          SCCACHE_GHA_ENABLED: "true"

      # Build everything else fast
      - name: build
        working-directory: build
        run: cmake --build . --parallel $(nproc)
        env:
          SCCACHE_GHA_ENABLED: "true"
